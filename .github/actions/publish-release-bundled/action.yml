name: 'Publish Release Bundled'
description: 'Builds, prepares, and publishes a bundled gemini-cli package to npm and creates a GitHub release.'

inputs:
  release-version:
    description: 'The version to release (e.g., 0.1.11).'
    required: true
  npm-tag:
    description: 'The npm tag to publish with (e.g., latest, preview, nightly).'
    required: true
  wombat-token-cli:
    description: 'The npm token for the cli package.'
    required: true
  github-token:
    description: 'The GitHub token for creating the release.'
    required: true
  dry-run:
    description: 'Whether to run in dry-run mode.'
    type: 'string'
    required: true
  release-tag:
    description: 'The release tag for the release (e.g., v0.1.11).'
    required: true
  previous-tag:
    description: 'The previous tag to use for generating release notes.'
    required: true
  skip-github-release:
    description: 'Whether to skip creating a GitHub release.'
    type: 'boolean'
    required: false
    default: false
  working-directory:
    description: 'The working directory to run the steps in.'
    required: false
    default: '.'
  force-skip-tests:
    description: 'Skip tests and validation'
    required: false
    default: false
  skip-branch-cleanup:
    description: 'Whether to skip cleaning up the release branch.'
    type: 'boolean'
    required: false
    default: false
  gemini_api_key:
    description: 'The API key for running integration tests.'
    required: true
  npm-registry-publish-url:
    description: 'npm registry publish url'
    required: true
  npm-registry-url:
    description: 'npm registry url'
    required: true
  npm-registry-scope:
    description: 'npm registry scope'
    required: true
  cli-package-name:
    description: 'The name of the cli package.'
    required: true
runs:
  using: 'composite'
  steps:
    - name: 'üìù Print Inputs'
      shell: 'bash'
      env:
        JSON_INPUTS: '${{ toJSON(inputs) }}'
      run: 'echo "$JSON_INPUTS"'

    - name: 'üë§ Configure Git User'
      working-directory: '${{ inputs.working-directory }}'
      shell: 'bash'
      run: |
        git config user.name "gemini-cli-robot"
        git config user.email "gemini-cli-robot@google.com"

    - name: 'üåø Create and switch to a release branch'
      working-directory: '${{ inputs.working-directory }}'
      id: 'release_branch'
      shell: 'bash'
      env:
        RELEASE_TAG: '${{ inputs.release-tag }}'
      run: |
        BRANCH_NAME="release/${RELEASE_TAG}"
        git switch -c "${BRANCH_NAME}"
        echo "BRANCH_NAME=${BRANCH_NAME}" >> "${GITHUB_OUTPUT}"

    - name: '‚¨ÜÔ∏è Update package versions'
      working-directory: '${{ inputs.working-directory }}'
      shell: 'bash'
      env:
        RELEASE_VERSION: '${{ inputs.release-version }}'
      run: |
        npm run release:version "${RELEASE_VERSION}"

    - name: 'üíæ Commit and Conditionally Push package versions'
      working-directory: '${{ inputs.working-directory }}'
      shell: 'bash'
      env:
        BRANCH_NAME: '${{ steps.release_branch.outputs.BRANCH_NAME }}'
        DRY_RUN: '${{ inputs.dry-run }}'
        RELEASE_TAG: '${{ inputs.release-tag }}'
      run: |-
        set -e
        git add package.json package-lock.json packages/*/package.json
        git commit -m "chore(release): ${RELEASE_TAG}"
        if [[ "${DRY_RUN}" == "false" ]]; then
          echo "Pushing release branch to remote..."
          git push --set-upstream origin "${BRANCH_NAME}" --follow-tags
        else
          echo "Dry run enabled. Skipping push."
        fi

    - name: 'üéÅ Bundle'
      working-directory: '${{ inputs.working-directory }}'
      shell: 'bash'
      run: |
        npm run bundle

    - name: 'Configure npm for publishing'
      uses: 'actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020'
      with:
        node-version-file: '${{ inputs.working-directory }}/.nvmrc'
        registry-url: '${{inputs.npm-registry-publish-url}}'
        scope: '${{inputs.npm-registry-scope}}'
        cache-dependency-path: '${{ inputs.working-directory }}/package-lock.json'
        cache: 'npm'

    - name: 'üì¶ Publish to NPM'
      working-directory: '${{ inputs.working-directory }}'
      env:
        NODE_AUTH_TOKEN: '${{ inputs.wombat-token-cli }}'
      run: |
        npm publish --dry-run="${{ inputs.dry-run }}"

    - name: 'üî¨ Verify Bundled NPM release by version'
      if: "${{ inputs.dry-run == 'false' && inputs.force-skip-tests == 'false' }}"
      working-directory: '${{ inputs.working-directory }}'
      shell: 'bash'
      env:
        CLI_PACKAGE_NAME: '${{ inputs.cli-package-name }}'
        RELEASE_VERSION: '${{ inputs.release-version }}'
      run: |
        npx -y ${CLI_PACKAGE_NAME}@${RELEASE_VERSION} --version

    - name: 'üéâ Create GitHub Release'
      working-directory: '${{ inputs.working-directory }}'
      if: "${{ inputs.dry-run == 'false' && inputs.skip-github-release == 'false' && inputs.npm-tag != 'dev' && inputs.npm-registry-url != 'https://npm.pkg.github.com/' }}"
      env:
        GITHUB_TOKEN: '${{ inputs.github-token }}'
        RELEASE_TAG: '${{ inputs.release-tag }}'
        BRANCH_NAME: '${{ steps.release_branch.outputs.BRANCH_NAME }}'
        PREVIOUS_TAG: '${{ inputs.previous-tag }}'
      shell: 'bash'
      run: |
        gh release create "${RELEASE_TAG}" \
          bundle/gemini.js \
          --target "${BRANCH_NAME}" \
          --title "Release ${RELEASE_TAG}" \
          --notes-start-tag "${PREVIOUS_TAG}" \
          --generate-notes

    - name: 'üßπ Clean up release branch'
      working-directory: '${{ inputs.working-directory }}'
      if: "${{ inputs.dry-run == 'false' && inputs.skip-branch-cleanup == 'false' }}"
      continue-on-error: true
      shell: 'bash'
      env:
        BRANCH_NAME: '${{ steps.release_branch.outputs.BRANCH_NAME }}'
      run: |
        echo "Cleaning up release branch ${BRANCH_NAME}..."
        git push origin --delete "${BRANCH_NAME}"