name: PR Review

on:
  pull_request_target:
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  enforce-review:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check for correct approval
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_AUTHOR: ${{ github.event.pull_request.user.login }}
        run: |
          # Step 1: Check if only documentation files were changed.
          changed_files=$(gh pr diff "$PR_NUMBER" --name-only)
          needs_review=false
          echo "Changed files:"
          echo "$changed_files"

          while IFS= read -r file; do
            if [[ -n "$file" && ! "$file" == *.md && ! "$file" == docs/* ]]; then
              echo "File requiring review: $file"
              needs_review=true
              break
            fi
          done <<< "$changed_files"

          if [ "$needs_review" = false ]; then
            echo "Only documentation files were changed. No review required by this workflow."
            exit 0
          fi

          echo "Code changes detected. Proceeding with approval check."

          # Step 2: Check for approvals based on author.
          echo "PR Author: $PR_AUTHOR"
          CORE_TEAM=('skeshive' 'chrstnb')
          
          is_core_author=false
          for member in "${CORE_TEAM[@]}"; do
            if [ "$PR_AUTHOR" == "$member" ]; then
              is_core_author=true
              break
            fi
          done

          if [ "$is_core_author" = true ]; then
            echo "Author is a core team member. Checking for core team approval."
            approved=false
            reviews=$(gh pr review list "$PR_NUMBER" --json author,state)
            echo "Reviews: $reviews"
            for member in "${CORE_TEAM[@]}"; do
              if echo "$reviews" | grep -q "\"author\":{\"login\":\"$member\"},\"state\":\"APPROVED\""""; then
                approved=true
                break
              fi
            done
            if [ "$approved" = false ]; then
              echo "Missing approval from a core team member."
              exit 1
            else
              echo "Core team approval found."
            fi
          else
            echo "Author is not a core team member. Checking for @google-gemini/gemini-cli-askmode-approvers team approval."
            approved=false
            
            # Get logins of users who have approved
            approvers=$(gh pr review list "$PR_NUMBER" --json author,state | jq -r '.[] | select(.state=="APPROVED") | .author.login')
            echo "Approving users: $approvers"

            # Get team members
            team_members=$(gh api orgs/google-gemini/teams/gemini-cli-askmode-approvers/members --jq '.[].login')
            echo "Team members: $team_members"

            # Check for intersection
            for approver in $approvers; do
              for member in $team_members; do
                if [ "$approver" == "$member" ]; then
                  echo "Approval found from team member: $approver"
                  approved=true
                  break 2 # break out of both loops
                fi
              done
            done

            if [ "$approved" = false ]; then
              echo "Missing approval from a member of @google-gemini/gemini-cli-askmode-approvers."
              exit 1
            else
              echo "Team approval found."
            fi
          fi
